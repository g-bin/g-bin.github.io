[{"title":"闭包","date":"2017-03-12T07:46:37.000Z","path":"2017/03/12/闭包/","text":"##闭包闭包的形成与变量的作用域以及变量的生存周期密切相关。下面我们先简单了解这两个知识点 ###一：变量的作用域 变量的作用域，就是指变量的有效范围。我们最常谈到的是在函数中声明的变量作用域。 当在函数中声明一个变量的时候，如果该变量前面没有带上关键字 var，这个变量就会成为全局变量，这当然是一种容易造成命名冲突的做法。 另外一种情况是用 var 关键字在函数中声明变量，这时候的变量即是局部变量，只有在该函数内部才能访问到这个变量，在函数外面是访问不到的。 123456789101112var a = 1; var func1 = function()&#123; var b = 2; var func2 = function()&#123; var c = 3; alert ( b ); // 输出： 2 alert ( a ); // 输出： 1 &#125; func2(); alert ( c ); // 输出： Uncaught ReferenceError: c is not defined &#125;; func1(); 注意：在 JavaScript 中，函数可以用来创造函数作用域。此时的函数像一层半透明的玻璃，在函数里面可以看到外面的变量，而在函数外面则无法看到函数里面的变量。这是因为当在函数中搜索一个变量的时候，如果该函数内并没有声明这个变量，那么此次搜索的过程会随着代码执行环境创建的作用域链往外层逐层搜索，一直搜索到全局对象为止。变量的搜索是从内到外而非从外到内的 ###二：变量的生存周期 对于全局变量来说，全局变量的生存周期当然是永久的，除非我们主动销毁这个全局变量。 而对于在函数内用 var 关键字声明的局部变量来说，当退出函数时，这些局部变量即失去了它们的价值，它们都会随着函数调用的结束而被销毁。 但是因为有闭包的存在却产生了很多奇妙的事情，小伙伴们下面的情形： 1：假设页面上有 5 个div 节点，我们通过循环来给每个 div 绑定 onclick 事件，按照索引顺序，点击第 1 个 div 时弹出0，点击第 2 个 div 时弹出 1，以此类推，你会怎么做呢？ &lt;html&gt; &lt;body&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;script&gt; var nodes = document.getElementsByTagName( &apos;div&apos; ); for ( var i = 0, len = nodes.length; i &lt; len; i++ ){ nodes[ i ].onclick = function(){ alert ( i ); } }; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]}]